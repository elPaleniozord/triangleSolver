{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Programowanie\\\\triangleSolver\\\\examples\\\\triangle-solver-react-native\\\\App.tsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TriangleSolver from 'triangle-solver';\nimport TriangleCanvas from \"./components/TriangleCanvas\";\nimport Inputs from \"./components/Inputs\";\nvar defaults = {\n  a: 5,\n  b: 5,\n  c: 5,\n  A: 60,\n  B: 60,\n  C: 60\n};\nvar triangle = new TriangleSolver(defaults);\nexport default function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      update = _React$useState2[0],\n      setUpdate = _React$useState2[1];\n\n  React.useEffect(function () {\n    setUpdate(false);\n  }, [update]);\n\n  var handleValueChange = function handleValueChange(e) {\n    var _e$target = e.target,\n        id = _e$target.id,\n        value = _e$target.value;\n    triangle.update(id, value);\n    triangle.validateInput();\n    setUpdate(true);\n  };\n\n  var solveTriangle = function solveTriangle() {\n    triangle.solve().then(function () {\n      return setUpdate(true);\n    }).catch(function (err) {\n      return alert(err);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.header1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"triangleSolver\"), React.createElement(TriangleCanvas, {\n    triangle: triangle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), React.createElement(Inputs, {\n    triangle: triangle,\n    handleValueChange: handleValueChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: solveTriangle,\n    title: \"Solve\",\n    color: \"black\",\n    accessibilityLabel: \"Compute unknown sides and angles of triangle\",\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  header1: {\n    fontSize: 20\n  },\n  button: {\n    maxWidth: 300,\n    padding: '20px'\n  }\n});","map":{"version":3,"sources":["C:/Programowanie/triangleSolver/examples/triangle-solver-react-native/App.tsx"],"names":["React","TriangleSolver","TriangleCanvas","Inputs","defaults","a","b","c","A","B","C","triangle","App","useState","update","setUpdate","useEffect","handleValueChange","e","target","id","value","validateInput","solveTriangle","solve","then","catch","err","alert","styles","container","header1","button","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontSize","maxWidth","padding"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,cAAP;AACA,OAAOC,MAAP;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,CAAC,EAAC,CADa;AACVC,EAAAA,CAAC,EAAC,CADQ;AACLC,EAAAA,CAAC,EAAC,CADG;AAEfC,EAAAA,CAAC,EAAC,EAFa;AAETC,EAAAA,CAAC,EAAC,EAFO;AAEHC,EAAAA,CAAC,EAAC;AAFC,CAAjB;AAIA,IAAMC,QAAQ,GAAG,IAAIV,cAAJ,CAAmBG,QAAnB,CAAjB;AAEA,eAAe,SAASQ,GAAT,GAAe;AAAA,wBACAZ,KAAK,CAACa,QAAN,CAAe,KAAf,CADA;AAAA;AAAA,MACrBC,MADqB;AAAA,MACbC,SADa;;AAG5Bf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAM;AACpBD,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFD,EAEG,CAACD,MAAD,CAFH;;AAIA,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,CAAC,EAAI;AAAA,oBACPA,CAAC,CAACC,MADK;AAAA,QACrBC,EADqB,aACrBA,EADqB;AAAA,QACjBC,KADiB,aACjBA,KADiB;AAE7BV,IAAAA,QAAQ,CAACG,MAAT,CAAgBM,EAAhB,EAAoBC,KAApB;AACAV,IAAAA,QAAQ,CAACW,aAAT;AACAP,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GALD;;AAOA,MAAMQ,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BZ,IAAAA,QAAQ,CAACa,KAAT,GACGC,IADH,CACQ;AAAA,aAAIV,SAAS,CAAC,IAAD,CAAb;AAAA,KADR,EAEGW,KAFH,CAES,UAAAC,GAAG;AAAA,aAAEC,KAAK,CAACD,GAAD,CAAP;AAAA,KAFZ;AAGD,GAJD;;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEpB,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEA,QAAlB;AAA4B,IAAA,iBAAiB,EAAEM,iBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAME,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEM,aADX;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,kBAAkB,EAAC,8CAJrB;AAKE,IAAA,KAAK,EAAEM,MAAM,CAACG,MALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAgBD;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BP,EAAAA,OAAO,EAAE;AACPQ,IAAAA,QAAQ,EAAE;AADH,GAPsB;AAU/BP,EAAAA,MAAM,EAAE;AACNQ,IAAAA,QAAQ,EAAE,GADJ;AAENC,IAAAA,OAAO,EAAE;AAFH;AAVuB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport TriangleSolver from 'triangle-solver';\nimport TriangleCanvas from './components/TriangleCanvas';\nimport Inputs from './components/Inputs';\n\nconst defaults = {\n  a:5, b:5, c:5,\n  A:60, B:60, C:60\n}\nconst triangle = new TriangleSolver(defaults)\n\nexport default function App() {\n  const [update, setUpdate] = React.useState(false);\n\n  React.useEffect(() => {\n    setUpdate(false);\n  }, [update]);\n\n  const handleValueChange = e => {\n    const { id, value } = e.target;\n    triangle.update(id, value);\n    triangle.validateInput();\n    setUpdate(true);\n  };\n\n  const solveTriangle = () => {\n    triangle.solve()\n      .then(()=>setUpdate(true))\n      .catch(err=>alert(err))\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header1}>triangleSolver</Text>\n\n      <TriangleCanvas triangle={triangle} />\n      <Inputs triangle={triangle} handleValueChange={handleValueChange} />\n\n      <Button \n        onPress={solveTriangle}\n        title=\"Solve\"\n        color=\"black\"\n        accessibilityLabel=\"Compute unknown sides and angles of triangle\"\n        style={styles.button}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  header1: {\n    fontSize: 20\n  },\n  button: {\n    maxWidth: 300,\n    padding: '20px'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}