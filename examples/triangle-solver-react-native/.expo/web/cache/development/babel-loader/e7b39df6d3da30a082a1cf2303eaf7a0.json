{"ast":null,"code":"export default \"<html><head>\\n    <meta content=\\\"width=device-width, initial-scale=1, maximum-scale=1, user-scaleable=no\\\" name=\\\"viewport\\\">\\n    <style>\\n      html {\\n        -ms-content-zooming: none;\\n        -ms-touch-action: pan-x pan-y;\\n      }\\n      body {\\n        position: fixed;\\n        top: 0;\\n        right: 0;\\n        bottom: 0;\\n        left: 0;\\n        margin: 0;\\n        padding: 0;\\n        overflow: hidden;\\n      }\\n      * {\\n        user-select: none;\\n        -ms-user-select: none;\\n        -moz-user-select: none;\\n        -webkit-user-select: none;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <script>(function () {\\n  if (CanvasRenderingContext2D.useSVGMatrix === void 0) {\\n    CanvasRenderingContext2D.useSVGMatrix = false;\\n  }\\n\\n  CanvasRenderingContext2D.arrayToSVGMatrix = function (matrix) {\\n    if (matrix instanceof SVGMatrix) {\\n      return matrix;\\n    } else if (matrix instanceof Array) {\\n      var _matrix = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();\\n\\n      _matrix.a = array[0];\\n      _matrix.b = array[1];\\n      _matrix.c = array[2];\\n      _matrix.d = array[3];\\n      _matrix.e = array[4];\\n      _matrix.f = array[5];\\n      return _matrix;\\n    } else {\\n      throw new Error('Matrix is not an Array');\\n    }\\n  };\\n\\n  CanvasRenderingContext2D.svgMatrixToArray = function (matrix) {\\n    if (matrix instanceof Array) {\\n      return matrix;\\n    } else if (matrix instanceof SVGMatrix) {\\n      return [matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f];\\n    } else {\\n      throw new Error('Matrix is not a SVGMatrix');\\n    }\\n  };\\n})();\\n\\n(function () {\\n  var canvasRenderingContext2DPrototype = CanvasRenderingContext2D.prototype;\\n  var HTMLCanvasElementPrototype = HTMLCanvasElement.prototype;\\n\\n  if (!('resetTransform' in canvasRenderingContext2DPrototype)) {\\n    canvasRenderingContext2DPrototype.resetTransform = function () {\\n      this.setTransform(1, 0, 0, 1, 0, 0);\\n    };\\n  }\\n\\n  if (!('currentTransform' in canvasRenderingContext2DPrototype)) {\\n    if ('mozCurrentTransform' in canvasRenderingContext2DPrototype) {\\n      Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\\n        get: function () {\\n          return this.mozCurrentTransform;\\n        },\\n        set: function (matrix) {\\n          this.mozCurrentTransform = matrix;\\n        },\\n        enumerable: true,\\n        configurable: true\\n      });\\n    } else {\\n      var getContext = HTMLCanvasElementPrototype.getContext;\\n\\n      HTMLCanvasElementPrototype.getContext = function (contextType, contextAttributes) {\\n        var context = getContext.call(this, contextType, contextAttributes);\\n\\n        switch (contextType) {\\n          case '2d':\\n            Object.defineProperties(context, {\\n              '_transformStack': {\\n                value: [],\\n                configurable: true,\\n                writable: true\\n              },\\n              '_transformMatrix': {\\n                value: [1, 0, 0, 1, 0, 0],\\n                configurable: true,\\n                writable: true\\n              }\\n            });\\n            break;\\n        }\\n\\n        return context;\\n      };\\n\\n      Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\\n        get: function () {\\n          return this._transformMatrix;\\n        },\\n        set: function (matrix) {\\n          this._transformMatrix = matrix;\\n          this.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\\n        },\\n        enumerable: true,\\n        configurable: true\\n      });\\n      var translate = canvasRenderingContext2DPrototype.translate;\\n\\n      canvasRenderingContext2DPrototype.translate = function (x, y) {\\n        var matrix = this._transformMatrix;\\n        matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\\n        matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\\n        translate.call(this, x, y);\\n      };\\n\\n      var scale = canvasRenderingContext2DPrototype.scale;\\n\\n      canvasRenderingContext2DPrototype.scale = function (x, y) {\\n        var matrix = this._transformMatrix;\\n        matrix[0] *= x;\\n        matrix[1] *= x;\\n        matrix[2] *= y;\\n        matrix[3] *= y;\\n        scale.call(this, x, y);\\n      };\\n\\n      var rotate = canvasRenderingContext2DPrototype.rotate;\\n\\n      canvasRenderingContext2DPrototype.rotate = function (angle) {\\n        var cosValue = Math.cos(angle);\\n        var sinValue = Math.sin(angle);\\n        var matrix = this._transformMatrix;\\n        this._transformMatrix = [matrix[0] * cosValue + matrix[2] * sinValue, matrix[1] * cosValue + matrix[3] * sinValue, matrix[0] * -sinValue + matrix[2] * cosValue, matrix[1] * -sinValue + matrix[3] * cosValue, matrix[4], matrix[5]];\\n        rotate.call(this, angle);\\n      };\\n\\n      var transform = canvasRenderingContext2DPrototype.transform;\\n\\n      canvasRenderingContext2DPrototype.transform = function (a, b, c, d, e, f) {\\n        var matrix = this._transformMatrix;\\n        this._transformMatrix = [matrix[0] * a + matrix[2] * b, matrix[1] * a + matrix[3] * b, matrix[0] * c + matrix[2] * d, matrix[1] * c + matrix[3] * d, matrix[0] * e + matrix[2] * f + matrix[4], matrix[1] * e + matrix[3] * f + matrix[5]];\\n        transform.call(this, a, b, c, d, e, f);\\n      };\\n\\n      var setTransform = canvasRenderingContext2DPrototype.setTransform;\\n\\n      canvasRenderingContext2DPrototype.setTransform = function (a, b, c, d, e, f) {\\n        this._transformMatrix = [a, b, c, d, e, f];\\n        setTransform.call(this, a, b, c, d, e, f);\\n      };\\n\\n      var resetTransform = canvasRenderingContext2DPrototype.resetTransform;\\n\\n      canvasRenderingContext2DPrototype.resetTransform = function () {\\n        this._transformMatrix = [1, 0, 0, 1, 0, 0];\\n        resetTransform.call(this);\\n      };\\n\\n      var save = canvasRenderingContext2DPrototype.save;\\n\\n      canvasRenderingContext2DPrototype.save = function () {\\n        this._transformStack.push(this._transformMatrix);\\n\\n        this._transformMatrix = this._transformMatrix.slice(0, 6);\\n        save.call(this);\\n      };\\n\\n      var restore = canvasRenderingContext2DPrototype.restore;\\n\\n      canvasRenderingContext2DPrototype.restore = function () {\\n        var matrix = this._transformStack.pop();\\n\\n        if (matrix) {\\n          this._transformMatrix = matrix;\\n        }\\n\\n        restore.call(this);\\n      };\\n    }\\n  }\\n\\n  var currentTransform = Object.getOwnPropertyDescriptor(CanvasRenderingContext2D.prototype, 'currentTransform');\\n  var currentTransformIsSVGMatrix = document.createElement('canvas').getContext('2d').currentTransform instanceof SVGMatrix;\\n  Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\\n    get: function () {\\n      var value = currentTransform.get.call(this);\\n      return CanvasRenderingContext2D.useSVGMatrix ? CanvasRenderingContext2D.arrayToSVGMatrix(value) : CanvasRenderingContext2D.svgMatrixToArray(value);\\n    },\\n    set: function (matrix) {\\n      currentTransform.set.call(this, currentTransformIsSVGMatrix ? CanvasRenderingContext2D.svgMatrixToArray(matrix) : CanvasRenderingContext2D.svgMatrixToArray(matrix));\\n    },\\n    enumerable: true,\\n    configurable: true\\n  });\\n\\n  if (!('imageSmoothingEnabled' in canvasRenderingContext2DPrototype)) {\\n    Object.defineProperty(canvasRenderingContext2DPrototype, 'imageSmoothingEnabled', {\\n      get: function () {\\n        if (this.mozImageSmoothingEnabled !== void 0) {\\n          return this.mozImageSmoothingEnabled;\\n        } else if (this.webkitImageSmoothingEnabled !== void 0) {\\n          return this.webkitImageSmoothingEnabled;\\n        } else if (this.msImageSmoothingEnabled !== void 0) {\\n          return this.msImageSmoothingEnabled;\\n        } else {\\n          return true;\\n        }\\n      },\\n      set: function (enable) {\\n        if (this.mozImageSmoothingEnabled !== void 0) {\\n          this.mozImageSmoothingEnabled = enable;\\n        } else if (this.webkitImageSmoothingEnabled !== void 0) {\\n          this.webkitImageSmoothingEnabled = enable;\\n        } else if (this.msImageSmoothingEnabled !== void 0) {\\n          this.msImageSmoothingEnabled = enable;\\n        }\\n      },\\n      enumerable: true,\\n      configurable: true\\n    });\\n  }\\n\\n  if (!('ellipse' in canvasRenderingContext2DPrototype)) {\\n    canvasRenderingContext2DPrototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {\\n      this.save();\\n      this.translate(x, y);\\n      this.rotate(rotation);\\n      this.scale(radiusX, radiusY);\\n      this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\\n      this.restore();\\n    };\\n  }\\n})();\\n\\n(function () {\\n  if (!('Path2D' in window) || !('addPath' in window.Path2D.prototype)) {\\n    var _Path2D = window.Path2D;\\n\\n    var Path2D = function (path2D) {\\n      Object.defineProperty(this, '_operations', {\\n        value: [],\\n        configurable: true,\\n        writable: true\\n      });\\n\\n      if (path2D instanceof Path2D) {\\n        if (path2D._original && _Path2D) {\\n          Object.defineProperty(this, '_original', {\\n            value: new _Path2D(path2D._original),\\n            configurable: true,\\n            writable: true\\n          });\\n          this._operations = path2D._operations.slice(0);\\n        } else {\\n          this.addPath(path2D);\\n        }\\n      } else if (_Path2D) {\\n        Object.defineProperty(this, '_original', {\\n          value: new _Path2D(path2D),\\n          configurable: true,\\n          writable: true\\n        });\\n      }\\n    };\\n\\n    window.Path2D = Path2D;\\n    var path2DPrototype = Path2D.prototype;\\n    ['arc', 'arcTo', 'bezierCurveTo', 'closePath', 'ellipse', 'lineTo', 'moveTo', 'quadraticCurveTo', 'rect'].forEach(function (attributeName) {\\n      path2DPrototype[attributeName] = function () {\\n        this._operations.push({\\n          type: attributeName,\\n          arguments: Array.prototype.slice.call(arguments, 0)\\n        });\\n\\n        if (this._original) _Path2D.prototype[attributeName].apply(this._original, arguments);\\n      };\\n    });\\n    var canvasRenderingContext2DPrototype = CanvasRenderingContext2D.prototype;\\n    ['fill', 'stroke', 'clip', 'isPointInPath', 'isPointInStroke'].forEach(function (attributeName) {\\n      var original = canvasRenderingContext2DPrototype[attributeName];\\n\\n      canvasRenderingContext2DPrototype[attributeName] = function (path2D) {\\n        if (path2D instanceof Path2D) {\\n          if (path2D._original) {\\n            return original.apply(this, [path2D._original].concat(Array.prototype.slice.call(arguments, 1)));\\n          } else {\\n            this.beginPath();\\n            var operation;\\n\\n            for (var i = 0, l = path2D._operations.length; i < l; i++) {\\n              operation = path2D._operations[i];\\n              canvasRenderingContext2DPrototype[operation.type].apply(this, operation.arguments);\\n            }\\n\\n            return original.apply(this, Array.prototype.slice.call(arguments, 1));\\n          }\\n        } else {\\n          return original.apply(this, arguments);\\n        }\\n      };\\n    });\\n\\n    if (!('addPath' in path2DPrototype)) {\\n      path2DPrototype.addPath = function (path2D, transform) {\\n        if (transform !== void 0) {\\n          if (path2D._original) delete path2D._original;\\n\\n          this._operations.push({\\n            type: 'save',\\n            arguments: []\\n          });\\n\\n          this._operations.push({\\n            type: 'transform',\\n            arguments: CanvasRenderingContext2D.svgMatrixToArray(transform)\\n          });\\n        }\\n\\n        var operation;\\n\\n        for (var i = 0, l = path2D._operations.length; i < l; i++) {\\n          operation = path2D._operations[i];\\n          path2DPrototype[operation.type].apply(this, operation.arguments);\\n        }\\n\\n        if (transform !== void 0) {\\n          this._operations.push({\\n            type: 'restore',\\n            arguments: []\\n          });\\n        }\\n      };\\n    }\\n  }\\n})();</script>\\n    <script>var scale = function scale(ratio) {\\n  return function (item) {\\n    if (typeof item === 'number') {\\n      return item * ratio;\\n    }\\n\\n    return item;\\n  };\\n};\\n\\nwindow.autoScaleCanvas = function autoScaleCanvas(canvas) {\\n  var ctx = canvas.getContext('2d');\\n  var ratio = window.devicePixelRatio || 1;\\n\\n  if (ratio != 1) {\\n    canvas.style.width = canvas.width + 'px';\\n    canvas.style.height = canvas.height + 'px';\\n    canvas.width *= ratio;\\n    canvas.height *= ratio;\\n    ctx.scale(ratio, ratio);\\n\\n    ctx.isPointInPath = function () {\\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n        args[_key] = arguments[_key];\\n      }\\n\\n      return CanvasRenderingContext2D.prototype.isPointInPath.apply(ctx, args.map(scale(ratio)));\\n    };\\n  }\\n\\n  return canvas;\\n};</script>\\n    <script>function _objectSpread(target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i] != null ? arguments[i] : {};\\n    var ownKeys = Object.keys(source);\\n\\n    if (typeof Object.getOwnPropertySymbols === 'function') {\\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\\n      }));\\n    }\\n\\n    ownKeys.forEach(function (key) {\\n      _defineProperty(target, key, source[key]);\\n    });\\n  }\\n\\n  return target;\\n}\\n\\nfunction _defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n}\\n\\nfunction _construct(Parent, args, Class) {\\n  if (typeof Reflect !== \\\"undefined\\\" && Reflect.construct) {\\n    _construct = Reflect.construct;\\n  } else {\\n    _construct = function _construct(Parent, args, Class) {\\n      var a = [null];\\n      a.push.apply(a, args);\\n      var Constructor = Parent.bind.apply(Parent, a);\\n      var instance = new Constructor();\\n      if (Class) _setPrototypeOf(instance, Class.prototype);\\n      return instance;\\n    };\\n  }\\n\\n  return _construct.apply(null, arguments);\\n}\\n\\nfunction _setPrototypeOf(o, p) {\\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\\n    o.__proto__ = p;\\n    return o;\\n  };\\n\\n  return _setPrototypeOf(o, p);\\n}\\n\\nfunction _toConsumableArray(arr) {\\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\\n}\\n\\nfunction _nonIterableSpread() {\\n  throw new TypeError(\\\"Invalid attempt to spread non-iterable instance\\\");\\n}\\n\\nfunction _iterableToArray(iter) {\\n  if ((typeof Symbol === \\\"function\\\" ? Symbol.iterator : \\\"@@iterator\\\") in Object(iter) || Object.prototype.toString.call(iter) === \\\"[object Arguments]\\\") return Array.from(iter);\\n}\\n\\nfunction _arrayWithoutHoles(arr) {\\n  if (Array.isArray(arr)) {\\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\\n      arr2[i] = arr[i];\\n    }\\n\\n    return arr2;\\n  }\\n}\\n\\nfunction _classCallCheck(instance, Constructor) {\\n  if (!(instance instanceof Constructor)) {\\n    throw new TypeError(\\\"Cannot call a class as a function\\\");\\n  }\\n}\\n\\nfunction _defineProperties(target, props) {\\n  for (var i = 0; i < props.length; i++) {\\n    var descriptor = props[i];\\n    descriptor.enumerable = descriptor.enumerable || false;\\n    descriptor.configurable = true;\\n    if (\\\"value\\\" in descriptor) descriptor.writable = true;\\n    Object.defineProperty(target, descriptor.key, descriptor);\\n  }\\n}\\n\\nfunction _createClass(Constructor, protoProps, staticProps) {\\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\\n  if (staticProps) _defineProperties(Constructor, staticProps);\\n  return Constructor;\\n}\\n\\nvar WEBVIEW_TARGET = '@@WEBVIEW_TARGET';\\n\\nvar ID = function ID() {\\n  return Math.random().toString(32).slice(2);\\n};\\n\\nvar flattenObjectCopyValue = function flattenObjectCopyValue(flatObj, srcObj, key) {\\n  var value = srcObj[key];\\n\\n  if (typeof value === 'function') {\\n    return;\\n  }\\n\\n  if (typeof value === 'object' && value instanceof Node) {\\n    return;\\n  }\\n\\n  flatObj[key] = flattenObject(value);\\n};\\n\\nvar flattenObject = function flattenObject(object) {\\n  if (typeof object !== 'object' || object === null) {\\n    return object;\\n  }\\n\\n  var flatObject = {};\\n\\n  for (var key in object) {\\n    flattenObjectCopyValue(flatObject, object, key);\\n  }\\n\\n  for (var _key in Object.getOwnPropertyNames(object)) {\\n    flattenObjectCopyValue(flatObject, object, _key);\\n  }\\n\\n  return flatObject;\\n};\\n\\nvar AutoScaledCanvas = function () {\\n  function AutoScaledCanvas(element) {\\n    _classCallCheck(this, AutoScaledCanvas);\\n\\n    this.element = element;\\n  }\\n\\n  _createClass(AutoScaledCanvas, [{\\n    key: \\\"toDataURL\\\",\\n    value: function toDataURL() {\\n      var _this$element;\\n\\n      return (_this$element = this.element).toDataURL.apply(_this$element, arguments);\\n    }\\n  }, {\\n    key: \\\"autoScale\\\",\\n    value: function autoScale() {\\n      if (this.savedHeight !== undefined) {\\n        this.element.height = this.savedHeight;\\n      }\\n\\n      if (this.savedWidth !== undefined) {\\n        this.element.width = this.savedWidth;\\n      }\\n\\n      window.autoScaleCanvas(this.element);\\n    }\\n  }, {\\n    key: \\\"width\\\",\\n    get: function get() {\\n      return this.element.width;\\n    },\\n    set: function set(value) {\\n      this.savedWidth = value;\\n      this.autoScale();\\n      return value;\\n    }\\n  }, {\\n    key: \\\"height\\\",\\n    get: function get() {\\n      return this.element.height;\\n    },\\n    set: function set(value) {\\n      this.savedHeight = value;\\n      this.autoScale();\\n      return value;\\n    }\\n  }]);\\n\\n  return AutoScaledCanvas;\\n}();\\n\\nvar toMessage = function toMessage(result) {\\n  if (result instanceof Blob) {\\n    return {\\n      type: 'blob',\\n      payload: btoa(result),\\n      meta: {}\\n    };\\n  }\\n\\n  if (result instanceof Object) {\\n    if (!result[WEBVIEW_TARGET]) {\\n      var id = ID();\\n      result[WEBVIEW_TARGET] = id;\\n      targets[id] = result;\\n    }\\n\\n    return {\\n      type: 'json',\\n      payload: flattenObject(result),\\n      args: toArgs(flattenObject(result)),\\n      meta: {\\n        target: result[WEBVIEW_TARGET],\\n        constructor: result.__constructorName__ || result.constructor.name\\n      }\\n    };\\n  }\\n\\n  return {\\n    type: 'json',\\n    payload: JSON.stringify(result),\\n    meta: {}\\n  };\\n};\\n\\nvar toArgs = function toArgs(result) {\\n  var args = [];\\n\\n  for (var key in result) {\\n    if (result[key] !== undefined && key !== '@@WEBVIEW_TARGET') {\\n      if (typedArrays[result[key].constructor.name] !== undefined) {\\n        result[key] = Array.from(result[key]);\\n      }\\n\\n      args.push(result[key]);\\n    }\\n  }\\n\\n  return args;\\n};\\n\\nvar createObjectsFromArgs = function createObjectsFromArgs(args) {\\n  for (var index = 0; index < args.length; index += 1) {\\n    var currentArg = args[index];\\n\\n    if (currentArg && currentArg.className !== undefined) {\\n      var className = currentArg.className,\\n          classArgs = currentArg.classArgs;\\n\\n      var object = _construct(constructors[className], _toConsumableArray(classArgs));\\n\\n      args[index] = object;\\n    }\\n  }\\n\\n  return args;\\n};\\n\\nvar print = function print() {\\n  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\\n    args[_key2] = arguments[_key2];\\n  }\\n\\n  var message = JSON.stringify({\\n    type: 'log',\\n    payload: args\\n  });\\n  window.ReactNativeWebView.postMessage(message);\\n};\\n\\nvar canvas = document.createElement('canvas');\\nvar autoScaledCanvas = new AutoScaledCanvas(canvas);\\nvar targets = {\\n  canvas: autoScaledCanvas,\\n  context2D: canvas.getContext('2d')\\n};\\nvar constructors = {\\n  Image: Image,\\n  Path2D: Path2D,\\n  CanvasGradient: CanvasGradient,\\n  ImageData: ImageData,\\n  Uint8ClampedArray: Uint8ClampedArray\\n};\\nvar typedArrays = {\\n  Uint8ClampedArray: Uint8ClampedArray\\n};\\n\\nImage.bind = Image.bind || function () {\\n  return Image;\\n};\\n\\nPath2D.bind = Path2D.bind || function () {\\n  return Path2D;\\n};\\n\\nImageData.bind = ImageData.bind || function () {\\n  return ImageData;\\n};\\n\\nUint8ClampedArray.bind = Uint8ClampedArray.bind || function () {\\n  return Uint8ClampedArray;\\n};\\n\\nvar populateRefs = function populateRefs(arg) {\\n  if (arg && arg.__ref__) {\\n    return targets[arg.__ref__];\\n  }\\n\\n  return arg;\\n};\\n\\ndocument.body.appendChild(canvas);\\n\\nfunction handleMessage(_ref) {\\n  var id = _ref.id,\\n      type = _ref.type,\\n      payload = _ref.payload;\\n\\n  switch (type) {\\n    case 'exec':\\n      {\\n        var _targets$target;\\n\\n        var target = payload.target,\\n            method = payload.method,\\n            args = payload.args;\\n\\n        var result = (_targets$target = targets[target])[method].apply(_targets$target, _toConsumableArray(args.map(populateRefs)));\\n\\n        var message = toMessage(result);\\n\\n        if (typeof result === 'object' && !message.meta.constructor) {\\n          for (var constructorName in constructors) {\\n            if (result instanceof constructors[constructorName]) {\\n              message.meta.constructor = constructorName;\\n            }\\n          }\\n        }\\n\\n        window.ReactNativeWebView.postMessage(JSON.stringify(_objectSpread({\\n          id: id\\n        }, message)));\\n        break;\\n      }\\n\\n    case 'set':\\n      {\\n        var _target = payload.target,\\n            key = payload.key,\\n            value = payload.value;\\n        targets[_target][key] = populateRefs(value);\\n        break;\\n      }\\n\\n    case 'construct':\\n      {\\n        var _constructor = payload.constructor,\\n            _target2 = payload.id,\\n            _payload$args = payload.args,\\n            _args = _payload$args === void 0 ? [] : _payload$args;\\n\\n        var newArgs = createObjectsFromArgs(_args);\\n        var object;\\n\\n        try {\\n          object = _construct(constructors[_constructor], _toConsumableArray(newArgs));\\n        } catch (error) {\\n          throw new Error(\\\"Error while constructing \\\" + _constructor + \\\" \\\" + error.message);\\n        }\\n\\n        object.__constructorName__ = _constructor;\\n\\n        var _message = toMessage({});\\n\\n        targets[_target2] = object;\\n        window.ReactNativeWebView.postMessage(JSON.stringify(_objectSpread({\\n          id: id\\n        }, _message)));\\n        break;\\n      }\\n\\n    case 'listen':\\n      {\\n        var _ret = function () {\\n          var types = payload.types,\\n              target = payload.target;\\n\\n          for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \\\"function\\\" ? Symbol.iterator : \\\"@@iterator\\\"]();;) {\\n            var _ref2;\\n\\n            if (_isArray) {\\n              if (_i >= _iterator.length) break;\\n              _ref2 = _iterator[_i++];\\n            } else {\\n              _i = _iterator.next();\\n              if (_i.done) break;\\n              _ref2 = _i.value;\\n            }\\n\\n            var _eventType = _ref2;\\n            targets[target].addEventListener(_eventType, function (e) {\\n              var message = toMessage({\\n                type: 'event',\\n                payload: {\\n                  type: e.type,\\n                  target: _objectSpread({}, flattenObject(targets[target]), _defineProperty({}, WEBVIEW_TARGET, target))\\n                }\\n              });\\n              window.ReactNativeWebView.postMessage(JSON.stringify(_objectSpread({\\n                id: id\\n              }, message)));\\n            });\\n          }\\n\\n          return \\\"break\\\";\\n        }();\\n\\n        if (_ret === \\\"break\\\") break;\\n      }\\n  }\\n}\\n\\nvar handleError = function handleError(err, message) {\\n  window.ReactNativeWebView.postMessage(JSON.stringify({\\n    id: message.id,\\n    type: 'error',\\n    payload: {\\n      message: err.message,\\n      stack: err.stack\\n    }\\n  }));\\n  document.removeEventListener('message', handleIncomingMessage);\\n};\\n\\nfunction handleIncomingMessage(e) {\\n  var data = JSON.parse(e.data);\\n\\n  if (Array.isArray(data)) {\\n    for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \\\"function\\\" ? Symbol.iterator : \\\"@@iterator\\\"]();;) {\\n      var _ref3;\\n\\n      if (_isArray2) {\\n        if (_i2 >= _iterator2.length) break;\\n        _ref3 = _iterator2[_i2++];\\n      } else {\\n        _i2 = _iterator2.next();\\n        if (_i2.done) break;\\n        _ref3 = _i2.value;\\n      }\\n\\n      var _message2 = _ref3;\\n\\n      try {\\n        handleMessage(_message2);\\n      } catch (err) {\\n        handleError(err, _message2);\\n      }\\n    }\\n  } else {\\n    try {\\n      handleMessage(data);\\n    } catch (err) {\\n      handleError(err, data);\\n    }\\n  }\\n}\\n\\nwindow.addEventListener('message', handleIncomingMessage);\\ndocument.addEventListener('message', handleIncomingMessage);</script>\\n  \\n\\n</body></html>\";","map":{"version":3,"sources":["C:/Programowanie/triangleSolver/examples/triangle-solver-react-native/node_modules/react-native-canvas/dist/index.html.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `<html><head>\n    <meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scaleable=no\" name=\"viewport\">\n    <style>\n      html {\n        -ms-content-zooming: none;\n        -ms-touch-action: pan-x pan-y;\n      }\n      body {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        margin: 0;\n        padding: 0;\n        overflow: hidden;\n      }\n      * {\n        user-select: none;\n        -ms-user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n      }\n    </style>\n  </head>\n  <body>\n    <script>(function () {\n  if (CanvasRenderingContext2D.useSVGMatrix === void 0) {\n    CanvasRenderingContext2D.useSVGMatrix = false;\n  }\n\n  CanvasRenderingContext2D.arrayToSVGMatrix = function (matrix) {\n    if (matrix instanceof SVGMatrix) {\n      return matrix;\n    } else if (matrix instanceof Array) {\n      var _matrix = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();\n\n      _matrix.a = array[0];\n      _matrix.b = array[1];\n      _matrix.c = array[2];\n      _matrix.d = array[3];\n      _matrix.e = array[4];\n      _matrix.f = array[5];\n      return _matrix;\n    } else {\n      throw new Error('Matrix is not an Array');\n    }\n  };\n\n  CanvasRenderingContext2D.svgMatrixToArray = function (matrix) {\n    if (matrix instanceof Array) {\n      return matrix;\n    } else if (matrix instanceof SVGMatrix) {\n      return [matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f];\n    } else {\n      throw new Error('Matrix is not a SVGMatrix');\n    }\n  };\n})();\n\n(function () {\n  var canvasRenderingContext2DPrototype = CanvasRenderingContext2D.prototype;\n  var HTMLCanvasElementPrototype = HTMLCanvasElement.prototype;\n\n  if (!('resetTransform' in canvasRenderingContext2DPrototype)) {\n    canvasRenderingContext2DPrototype.resetTransform = function () {\n      this.setTransform(1, 0, 0, 1, 0, 0);\n    };\n  }\n\n  if (!('currentTransform' in canvasRenderingContext2DPrototype)) {\n    if ('mozCurrentTransform' in canvasRenderingContext2DPrototype) {\n      Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\n        get: function () {\n          return this.mozCurrentTransform;\n        },\n        set: function (matrix) {\n          this.mozCurrentTransform = matrix;\n        },\n        enumerable: true,\n        configurable: true\n      });\n    } else {\n      var getContext = HTMLCanvasElementPrototype.getContext;\n\n      HTMLCanvasElementPrototype.getContext = function (contextType, contextAttributes) {\n        var context = getContext.call(this, contextType, contextAttributes);\n\n        switch (contextType) {\n          case '2d':\n            Object.defineProperties(context, {\n              '_transformStack': {\n                value: [],\n                configurable: true,\n                writable: true\n              },\n              '_transformMatrix': {\n                value: [1, 0, 0, 1, 0, 0],\n                configurable: true,\n                writable: true\n              }\n            });\n            break;\n        }\n\n        return context;\n      };\n\n      Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\n        get: function () {\n          return this._transformMatrix;\n        },\n        set: function (matrix) {\n          this._transformMatrix = matrix;\n          this.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n        },\n        enumerable: true,\n        configurable: true\n      });\n      var translate = canvasRenderingContext2DPrototype.translate;\n\n      canvasRenderingContext2DPrototype.translate = function (x, y) {\n        var matrix = this._transformMatrix;\n        matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\n        matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\n        translate.call(this, x, y);\n      };\n\n      var scale = canvasRenderingContext2DPrototype.scale;\n\n      canvasRenderingContext2DPrototype.scale = function (x, y) {\n        var matrix = this._transformMatrix;\n        matrix[0] *= x;\n        matrix[1] *= x;\n        matrix[2] *= y;\n        matrix[3] *= y;\n        scale.call(this, x, y);\n      };\n\n      var rotate = canvasRenderingContext2DPrototype.rotate;\n\n      canvasRenderingContext2DPrototype.rotate = function (angle) {\n        var cosValue = Math.cos(angle);\n        var sinValue = Math.sin(angle);\n        var matrix = this._transformMatrix;\n        this._transformMatrix = [matrix[0] * cosValue + matrix[2] * sinValue, matrix[1] * cosValue + matrix[3] * sinValue, matrix[0] * -sinValue + matrix[2] * cosValue, matrix[1] * -sinValue + matrix[3] * cosValue, matrix[4], matrix[5]];\n        rotate.call(this, angle);\n      };\n\n      var transform = canvasRenderingContext2DPrototype.transform;\n\n      canvasRenderingContext2DPrototype.transform = function (a, b, c, d, e, f) {\n        var matrix = this._transformMatrix;\n        this._transformMatrix = [matrix[0] * a + matrix[2] * b, matrix[1] * a + matrix[3] * b, matrix[0] * c + matrix[2] * d, matrix[1] * c + matrix[3] * d, matrix[0] * e + matrix[2] * f + matrix[4], matrix[1] * e + matrix[3] * f + matrix[5]];\n        transform.call(this, a, b, c, d, e, f);\n      };\n\n      var setTransform = canvasRenderingContext2DPrototype.setTransform;\n\n      canvasRenderingContext2DPrototype.setTransform = function (a, b, c, d, e, f) {\n        this._transformMatrix = [a, b, c, d, e, f];\n        setTransform.call(this, a, b, c, d, e, f);\n      };\n\n      var resetTransform = canvasRenderingContext2DPrototype.resetTransform;\n\n      canvasRenderingContext2DPrototype.resetTransform = function () {\n        this._transformMatrix = [1, 0, 0, 1, 0, 0];\n        resetTransform.call(this);\n      };\n\n      var save = canvasRenderingContext2DPrototype.save;\n\n      canvasRenderingContext2DPrototype.save = function () {\n        this._transformStack.push(this._transformMatrix);\n\n        this._transformMatrix = this._transformMatrix.slice(0, 6);\n        save.call(this);\n      };\n\n      var restore = canvasRenderingContext2DPrototype.restore;\n\n      canvasRenderingContext2DPrototype.restore = function () {\n        var matrix = this._transformStack.pop();\n\n        if (matrix) {\n          this._transformMatrix = matrix;\n        }\n\n        restore.call(this);\n      };\n    }\n  }\n\n  var currentTransform = Object.getOwnPropertyDescriptor(CanvasRenderingContext2D.prototype, 'currentTransform');\n  var currentTransformIsSVGMatrix = document.createElement('canvas').getContext('2d').currentTransform instanceof SVGMatrix;\n  Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\n    get: function () {\n      var value = currentTransform.get.call(this);\n      return CanvasRenderingContext2D.useSVGMatrix ? CanvasRenderingContext2D.arrayToSVGMatrix(value) : CanvasRenderingContext2D.svgMatrixToArray(value);\n    },\n    set: function (matrix) {\n      currentTransform.set.call(this, currentTransformIsSVGMatrix ? CanvasRenderingContext2D.svgMatrixToArray(matrix) : CanvasRenderingContext2D.svgMatrixToArray(matrix));\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  if (!('imageSmoothingEnabled' in canvasRenderingContext2DPrototype)) {\n    Object.defineProperty(canvasRenderingContext2DPrototype, 'imageSmoothingEnabled', {\n      get: function () {\n        if (this.mozImageSmoothingEnabled !== void 0) {\n          return this.mozImageSmoothingEnabled;\n        } else if (this.webkitImageSmoothingEnabled !== void 0) {\n          return this.webkitImageSmoothingEnabled;\n        } else if (this.msImageSmoothingEnabled !== void 0) {\n          return this.msImageSmoothingEnabled;\n        } else {\n          return true;\n        }\n      },\n      set: function (enable) {\n        if (this.mozImageSmoothingEnabled !== void 0) {\n          this.mozImageSmoothingEnabled = enable;\n        } else if (this.webkitImageSmoothingEnabled !== void 0) {\n          this.webkitImageSmoothingEnabled = enable;\n        } else if (this.msImageSmoothingEnabled !== void 0) {\n          this.msImageSmoothingEnabled = enable;\n        }\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n\n  if (!('ellipse' in canvasRenderingContext2DPrototype)) {\n    canvasRenderingContext2DPrototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {\n      this.save();\n      this.translate(x, y);\n      this.rotate(rotation);\n      this.scale(radiusX, radiusY);\n      this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\n      this.restore();\n    };\n  }\n})();\n\n(function () {\n  if (!('Path2D' in window) || !('addPath' in window.Path2D.prototype)) {\n    var _Path2D = window.Path2D;\n\n    var Path2D = function (path2D) {\n      Object.defineProperty(this, '_operations', {\n        value: [],\n        configurable: true,\n        writable: true\n      });\n\n      if (path2D instanceof Path2D) {\n        if (path2D._original && _Path2D) {\n          Object.defineProperty(this, '_original', {\n            value: new _Path2D(path2D._original),\n            configurable: true,\n            writable: true\n          });\n          this._operations = path2D._operations.slice(0);\n        } else {\n          this.addPath(path2D);\n        }\n      } else if (_Path2D) {\n        Object.defineProperty(this, '_original', {\n          value: new _Path2D(path2D),\n          configurable: true,\n          writable: true\n        });\n      }\n    };\n\n    window.Path2D = Path2D;\n    var path2DPrototype = Path2D.prototype;\n    ['arc', 'arcTo', 'bezierCurveTo', 'closePath', 'ellipse', 'lineTo', 'moveTo', 'quadraticCurveTo', 'rect'].forEach(function (attributeName) {\n      path2DPrototype[attributeName] = function () {\n        this._operations.push({\n          type: attributeName,\n          arguments: Array.prototype.slice.call(arguments, 0)\n        });\n\n        if (this._original) _Path2D.prototype[attributeName].apply(this._original, arguments);\n      };\n    });\n    var canvasRenderingContext2DPrototype = CanvasRenderingContext2D.prototype;\n    ['fill', 'stroke', 'clip', 'isPointInPath', 'isPointInStroke'].forEach(function (attributeName) {\n      var original = canvasRenderingContext2DPrototype[attributeName];\n\n      canvasRenderingContext2DPrototype[attributeName] = function (path2D) {\n        if (path2D instanceof Path2D) {\n          if (path2D._original) {\n            return original.apply(this, [path2D._original].concat(Array.prototype.slice.call(arguments, 1)));\n          } else {\n            this.beginPath();\n            var operation;\n\n            for (var i = 0, l = path2D._operations.length; i < l; i++) {\n              operation = path2D._operations[i];\n              canvasRenderingContext2DPrototype[operation.type].apply(this, operation.arguments);\n            }\n\n            return original.apply(this, Array.prototype.slice.call(arguments, 1));\n          }\n        } else {\n          return original.apply(this, arguments);\n        }\n      };\n    });\n\n    if (!('addPath' in path2DPrototype)) {\n      path2DPrototype.addPath = function (path2D, transform) {\n        if (transform !== void 0) {\n          if (path2D._original) delete path2D._original;\n\n          this._operations.push({\n            type: 'save',\n            arguments: []\n          });\n\n          this._operations.push({\n            type: 'transform',\n            arguments: CanvasRenderingContext2D.svgMatrixToArray(transform)\n          });\n        }\n\n        var operation;\n\n        for (var i = 0, l = path2D._operations.length; i < l; i++) {\n          operation = path2D._operations[i];\n          path2DPrototype[operation.type].apply(this, operation.arguments);\n        }\n\n        if (transform !== void 0) {\n          this._operations.push({\n            type: 'restore',\n            arguments: []\n          });\n        }\n      };\n    }\n  }\n})();</script>\n    <script>var scale = function scale(ratio) {\n  return function (item) {\n    if (typeof item === 'number') {\n      return item * ratio;\n    }\n\n    return item;\n  };\n};\n\nwindow.autoScaleCanvas = function autoScaleCanvas(canvas) {\n  var ctx = canvas.getContext('2d');\n  var ratio = window.devicePixelRatio || 1;\n\n  if (ratio != 1) {\n    canvas.style.width = canvas.width + 'px';\n    canvas.style.height = canvas.height + 'px';\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx.scale(ratio, ratio);\n\n    ctx.isPointInPath = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return CanvasRenderingContext2D.prototype.isPointInPath.apply(ctx, args.map(scale(ratio)));\n    };\n  }\n\n  return canvas;\n};</script>\n    <script>function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _construct(Parent, args, Class) {\n  if (typeof Reflect !== \"undefined\" && Reflect.construct) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Parent.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar WEBVIEW_TARGET = '@@WEBVIEW_TARGET';\n\nvar ID = function ID() {\n  return Math.random().toString(32).slice(2);\n};\n\nvar flattenObjectCopyValue = function flattenObjectCopyValue(flatObj, srcObj, key) {\n  var value = srcObj[key];\n\n  if (typeof value === 'function') {\n    return;\n  }\n\n  if (typeof value === 'object' && value instanceof Node) {\n    return;\n  }\n\n  flatObj[key] = flattenObject(value);\n};\n\nvar flattenObject = function flattenObject(object) {\n  if (typeof object !== 'object' || object === null) {\n    return object;\n  }\n\n  var flatObject = {};\n\n  for (var key in object) {\n    flattenObjectCopyValue(flatObject, object, key);\n  }\n\n  for (var _key in Object.getOwnPropertyNames(object)) {\n    flattenObjectCopyValue(flatObject, object, _key);\n  }\n\n  return flatObject;\n};\n\nvar AutoScaledCanvas = function () {\n  function AutoScaledCanvas(element) {\n    _classCallCheck(this, AutoScaledCanvas);\n\n    this.element = element;\n  }\n\n  _createClass(AutoScaledCanvas, [{\n    key: \"toDataURL\",\n    value: function toDataURL() {\n      var _this$element;\n\n      return (_this$element = this.element).toDataURL.apply(_this$element, arguments);\n    }\n  }, {\n    key: \"autoScale\",\n    value: function autoScale() {\n      if (this.savedHeight !== undefined) {\n        this.element.height = this.savedHeight;\n      }\n\n      if (this.savedWidth !== undefined) {\n        this.element.width = this.savedWidth;\n      }\n\n      window.autoScaleCanvas(this.element);\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.element.width;\n    },\n    set: function set(value) {\n      this.savedWidth = value;\n      this.autoScale();\n      return value;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.element.height;\n    },\n    set: function set(value) {\n      this.savedHeight = value;\n      this.autoScale();\n      return value;\n    }\n  }]);\n\n  return AutoScaledCanvas;\n}();\n\nvar toMessage = function toMessage(result) {\n  if (result instanceof Blob) {\n    return {\n      type: 'blob',\n      payload: btoa(result),\n      meta: {}\n    };\n  }\n\n  if (result instanceof Object) {\n    if (!result[WEBVIEW_TARGET]) {\n      var id = ID();\n      result[WEBVIEW_TARGET] = id;\n      targets[id] = result;\n    }\n\n    return {\n      type: 'json',\n      payload: flattenObject(result),\n      args: toArgs(flattenObject(result)),\n      meta: {\n        target: result[WEBVIEW_TARGET],\n        constructor: result.__constructorName__ || result.constructor.name\n      }\n    };\n  }\n\n  return {\n    type: 'json',\n    payload: JSON.stringify(result),\n    meta: {}\n  };\n};\n\nvar toArgs = function toArgs(result) {\n  var args = [];\n\n  for (var key in result) {\n    if (result[key] !== undefined && key !== '@@WEBVIEW_TARGET') {\n      if (typedArrays[result[key].constructor.name] !== undefined) {\n        result[key] = Array.from(result[key]);\n      }\n\n      args.push(result[key]);\n    }\n  }\n\n  return args;\n};\n\nvar createObjectsFromArgs = function createObjectsFromArgs(args) {\n  for (var index = 0; index < args.length; index += 1) {\n    var currentArg = args[index];\n\n    if (currentArg && currentArg.className !== undefined) {\n      var className = currentArg.className,\n          classArgs = currentArg.classArgs;\n\n      var object = _construct(constructors[className], _toConsumableArray(classArgs));\n\n      args[index] = object;\n    }\n  }\n\n  return args;\n};\n\nvar print = function print() {\n  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  var message = JSON.stringify({\n    type: 'log',\n    payload: args\n  });\n  window.ReactNativeWebView.postMessage(message);\n};\n\nvar canvas = document.createElement('canvas');\nvar autoScaledCanvas = new AutoScaledCanvas(canvas);\nvar targets = {\n  canvas: autoScaledCanvas,\n  context2D: canvas.getContext('2d')\n};\nvar constructors = {\n  Image: Image,\n  Path2D: Path2D,\n  CanvasGradient: CanvasGradient,\n  ImageData: ImageData,\n  Uint8ClampedArray: Uint8ClampedArray\n};\nvar typedArrays = {\n  Uint8ClampedArray: Uint8ClampedArray\n};\n\nImage.bind = Image.bind || function () {\n  return Image;\n};\n\nPath2D.bind = Path2D.bind || function () {\n  return Path2D;\n};\n\nImageData.bind = ImageData.bind || function () {\n  return ImageData;\n};\n\nUint8ClampedArray.bind = Uint8ClampedArray.bind || function () {\n  return Uint8ClampedArray;\n};\n\nvar populateRefs = function populateRefs(arg) {\n  if (arg && arg.__ref__) {\n    return targets[arg.__ref__];\n  }\n\n  return arg;\n};\n\ndocument.body.appendChild(canvas);\n\nfunction handleMessage(_ref) {\n  var id = _ref.id,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case 'exec':\n      {\n        var _targets$target;\n\n        var target = payload.target,\n            method = payload.method,\n            args = payload.args;\n\n        var result = (_targets$target = targets[target])[method].apply(_targets$target, _toConsumableArray(args.map(populateRefs)));\n\n        var message = toMessage(result);\n\n        if (typeof result === 'object' && !message.meta.constructor) {\n          for (var constructorName in constructors) {\n            if (result instanceof constructors[constructorName]) {\n              message.meta.constructor = constructorName;\n            }\n          }\n        }\n\n        window.ReactNativeWebView.postMessage(JSON.stringify(_objectSpread({\n          id: id\n        }, message)));\n        break;\n      }\n\n    case 'set':\n      {\n        var _target = payload.target,\n            key = payload.key,\n            value = payload.value;\n        targets[_target][key] = populateRefs(value);\n        break;\n      }\n\n    case 'construct':\n      {\n        var _constructor = payload.constructor,\n            _target2 = payload.id,\n            _payload$args = payload.args,\n            _args = _payload$args === void 0 ? [] : _payload$args;\n\n        var newArgs = createObjectsFromArgs(_args);\n        var object;\n\n        try {\n          object = _construct(constructors[_constructor], _toConsumableArray(newArgs));\n        } catch (error) {\n          throw new Error(\"Error while constructing \" + _constructor + \" \" + error.message);\n        }\n\n        object.__constructorName__ = _constructor;\n\n        var _message = toMessage({});\n\n        targets[_target2] = object;\n        window.ReactNativeWebView.postMessage(JSON.stringify(_objectSpread({\n          id: id\n        }, _message)));\n        break;\n      }\n\n    case 'listen':\n      {\n        var _ret = function () {\n          var types = payload.types,\n              target = payload.target;\n\n          for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref2;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref2 = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref2 = _i.value;\n            }\n\n            var _eventType = _ref2;\n            targets[target].addEventListener(_eventType, function (e) {\n              var message = toMessage({\n                type: 'event',\n                payload: {\n                  type: e.type,\n                  target: _objectSpread({}, flattenObject(targets[target]), _defineProperty({}, WEBVIEW_TARGET, target))\n                }\n              });\n              window.ReactNativeWebView.postMessage(JSON.stringify(_objectSpread({\n                id: id\n              }, message)));\n            });\n          }\n\n          return \"break\";\n        }();\n\n        if (_ret === \"break\") break;\n      }\n  }\n}\n\nvar handleError = function handleError(err, message) {\n  window.ReactNativeWebView.postMessage(JSON.stringify({\n    id: message.id,\n    type: 'error',\n    payload: {\n      message: err.message,\n      stack: err.stack\n    }\n  }));\n  document.removeEventListener('message', handleIncomingMessage);\n};\n\nfunction handleIncomingMessage(e) {\n  var data = JSON.parse(e.data);\n\n  if (Array.isArray(data)) {\n    for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref3;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n\n      var _message2 = _ref3;\n\n      try {\n        handleMessage(_message2);\n      } catch (err) {\n        handleError(err, _message2);\n      }\n    }\n  } else {\n    try {\n      handleMessage(data);\n    } catch (err) {\n      handleError(err, data);\n    }\n  }\n}\n\nwindow.addEventListener('message', handleIncomingMessage);\ndocument.addEventListener('message', handleIncomingMessage);</script>\n  \n\n</body></html>`"]},"metadata":{},"sourceType":"module"}